<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.clv.jwat.note2p.mapper.CategoryMapper">
    <resultMap id="CategoryMapper" type="Category">
        <result property="id" column="ID"/>
        <result property="title" column="TITLE"/>
        <result property="deleted" column="IS_DELETED"/>
        <result property="createdAt" column="CREATED_AT"/>
        <result property="updatedAt" column="UPDATED_AT"/>
        <result property="userId" column="USER_ID"/>
        <result property="allTasksIsDone" column="DONE"/>
        <result property="allTasks" column="ALL"/>
    </resultMap>

    <select id="count" resultType="long">
        SELECT COUNT(C.id)
        FROM CATEGORY C JOIN
            (
            SELECT C.ID, COUNT(T.ID) AS DONE
            FROM CATEGORY C LEFT JOIN TASKS T ON C.ID = T.CATEGORY_ID AND T.IS_DELETED = FALSE AND T.IS_DONE = TRUE
            GROUP BY C.ID
            ) D ON C.ID = D.ID JOIN
            (
            SELECT C.ID, COUNT(T.ID) AS ALL
            FROM CATEGORY C LEFT JOIN TASKS T ON C.ID = T.CATEGORY_ID
            AND T.IS_DELETED = FALSE
            GROUP BY C.ID
            ) A ON C.ID = A.ID
        WHERE C.USER_ID = #{userId} AND C.IS_DELETED = false
        <if test="keyWord != null">
            AND LOWER(C.TITLE) LIKE '%' || #{keyWord} || '%'
        </if>
        <if test="state == 'DONE'">
            AND A.ALL = D.DONE AND A.ALL > 0
        </if>
        <if test="state == 'NDONE'">
            AND (D.DONE &lt; A.ALL OR A.ALL = 0)
        </if>
    </select>

    <select id="getCategories" resultMap="CategoryMapper">
        SELECT C.ID, C.TITLE, C.CREATED_AT, C.UPDATED_AT, C.USER_ID, D.DONE, A.ALL
        FROM CATEGORY C JOIN
             (
                 SELECT C.ID, COUNT(T.ID) AS DONE
                 FROM CATEGORY C LEFT JOIN TASKS T ON C.ID = T.CATEGORY_ID AND T.IS_DELETED = FALSE AND T.IS_DONE = TRUE
                 GROUP BY C.ID
             ) D ON C.ID = D.ID JOIN
             (
                 SELECT C.ID, COUNT(T.ID) AS ALL
                 FROM CATEGORY C LEFT JOIN TASKS T ON C.ID = T.CATEGORY_ID
                     AND T.IS_DELETED = FALSE
                 GROUP BY C.ID
             ) A ON C.ID = A.ID
        WHERE C.USER_ID = #{userId} AND C.IS_DELETED = false
        <if test="keyWord != null">
            AND LOWER(C.TITLE) LIKE '%' || #{keyWord} || '%'
        </if>
        <if test="state == 'DONE'">
            AND A.ALL = D.DONE AND A.ALL > 0
        </if>
        <if test="state == 'NDONE'">
            AND (D.DONE &lt; A.ALL OR A.ALL = 0)
        </if>
        ORDER BY C.CREATED_AT DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="findById" resultMap="CategoryMapper">
        SELECT C.ID, C.TITLE, C.CREATED_AT, C.UPDATED_AT, C.USER_ID, D.DONE, A.ALL
        FROM CATEGORY C JOIN
             (
                 SELECT C.ID, COUNT(T.ID) AS DONE
                 FROM CATEGORY C LEFT JOIN TASKS T ON C.ID = T.CATEGORY_ID AND T.IS_DELETED = FALSE AND T.IS_DONE = TRUE
                 GROUP BY C.ID
             ) D ON C.ID = D.ID JOIN
             (
                 SELECT C.ID, COUNT(T.ID) AS ALL
                 FROM CATEGORY C LEFT JOIN TASKS T ON C.ID = T.CATEGORY_ID
                     AND T.IS_DELETED = FALSE
                 GROUP BY C.ID
             ) A ON C.ID = A.ID
        WHERE C.ID = #{id}
    </select>

    <update id="delete" parameterType="Category">
        UPDATE CATEGORY
        SET IS_DELETED = #{isDeleted}, UPDATED_AT = #{updatedAt}
        WHERE ID = #{id}
    </update>

    <update id="update" parameterType="Category">
        UPDATE CATEGORY
        SET TITLE= #{title},UPDATED_AT= #{updatedAt}
        WHERE ID = #{id}
    </update>

    <insert id="insert" parameterType="Category">
        insert into category(title, created_at, updated_at, is_deleted, user_id)
        values (#{title}, #{createdAt}, #{updatedAt}, #{isDeleted}, #{userId})
        <selectKey resultType="Long" keyProperty="id" order="AFTER">
            select LASTVAL()
        </selectKey>
    </insert>
</mapper>